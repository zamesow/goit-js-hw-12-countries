{"id":"../node_modules/infinite-scroll/js/history.js","dependencies":[{"name":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\module-12-3\\package.json","includedInParent":true,"mtime":1606682111216},{"name":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\.browserslistrc","includedInParent":true,"mtime":1606680572382},{"name":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\module-12-3\\node_modules\\infinite-scroll\\package.json","includedInParent":true,"mtime":1606682098694},{"name":"./core","loc":{"line":17,"column":14},"parent":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\module-12-3\\node_modules\\infinite-scroll\\js\\history.js","resolved":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\module-12-3\\node_modules\\infinite-scroll\\js\\core.js"},{"name":"fizzy-ui-utils","loc":{"line":18,"column":14},"parent":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\module-12-3\\node_modules\\infinite-scroll\\js\\history.js","resolved":"C:\\Users\\zames\\Desktop\\Projects\\GoIT-school\\goit-js-hw-12-countries\\module-12-3\\node_modules\\fizzy-ui-utils\\utils.js"}],"generated":{"js":"var define;\n// history\n( function( window, factory ) {\n  // universal module definition\n  /* globals define, module, require */\n  if ( typeof define == 'function' && define.amd ) {\n    // AMD\n    define( [\n      './core',\n      'fizzy-ui-utils/utils',\n    ], function( InfiniteScroll, utils ) {\n      return factory( window, InfiniteScroll, utils );\n    });\n  } else if ( typeof module == 'object' && module.exports ) {\n    // CommonJS\n    module.exports = factory(\n      window,\n      require('./core'),\n      require('fizzy-ui-utils')\n    );\n  } else {\n    // browser global\n    factory(\n      window,\n      window.InfiniteScroll,\n      window.fizzyUIUtils\n    );\n  }\n\n}( window, function factory( window, InfiniteScroll, utils ) {\n\nvar proto = InfiniteScroll.prototype;\n\nInfiniteScroll.defaults.history = 'replace';\n// InfiniteScroll.defaults.historyTitle = false;\n\nvar link = document.createElement('a');\n\n// ----- create/destroy ----- //\n\nInfiniteScroll.create.history = function() {\n  if ( !this.options.history ) {\n    return;\n  }\n  // check for same origin\n  link.href = this.getAbsolutePath();\n  // MS Edge does not have origin on link https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12236493/\n  var linkOrigin = link.origin || link.protocol + '//' + link.host;\n  var isSameOrigin = linkOrigin == location.origin;\n  if ( !isSameOrigin ) {\n    console.error( '[InfiniteScroll] cannot set history with different origin: ' +\n      link.origin + ' on ' + location.origin +\n      ' . History behavior disabled.' );\n    return;\n  }\n\n  // two ways to handle changing history\n  if ( this.options.append ) {\n    this.createHistoryAppend();\n  } else {\n    this.createHistoryPageLoad();\n  }\n};\n\nproto.createHistoryAppend = function() {\n  this.updateMeasurements();\n  this.updateScroller();\n  // array of scroll positions of appended pages\n  this.scrollPages = [\n    {\n      // first page\n      top: 0,\n      path: location.href,\n      title: document.title,\n    }\n  ];\n  this.scrollPageIndex = 0;\n  // events\n  this.scrollHistoryHandler = this.onScrollHistory.bind( this );\n  this.unloadHandler = this.onUnload.bind( this );\n  this.scroller.addEventListener( 'scroll', this.scrollHistoryHandler );\n  this.on( 'append', this.onAppendHistory );\n  this.bindHistoryAppendEvents( true );\n};\n\nproto.bindHistoryAppendEvents = function( isBind ) {\n  var addRemove = isBind ? 'addEventListener' : 'removeEventListener';\n  this.scroller[ addRemove ]( 'scroll', this.scrollHistoryHandler );\n  window[ addRemove ]( 'unload', this.unloadHandler );\n};\n\nproto.createHistoryPageLoad = function() {\n  this.on( 'load', this.onPageLoadHistory );\n};\n\nInfiniteScroll.destroy.history =\nproto.destroyHistory = function() {\n  var isHistoryAppend = this.options.history && this.options.append;\n  if ( isHistoryAppend ) {\n    this.bindHistoryAppendEvents( false );\n  }\n};\n\n// ----- append history ----- //\n\nproto.onAppendHistory = function( response, path, items ) {\n  // do not proceed if no items. #779\n  if ( !items || !items.length ) {\n    return;\n  }\n  var firstItem = items[0];\n  var elemScrollY = this.getElementScrollY( firstItem );\n  // resolve path\n  link.href = path;\n  // add page data to hash\n  this.scrollPages.push({\n    top: elemScrollY,\n    path: link.href,\n    title: response.title,\n  });\n};\n\nproto.getElementScrollY = function( elem ) {\n  if ( this.options.elementScroll ) {\n    return this.getElementElementScrollY( elem );\n  } else {\n    return this.getElementWindowScrollY( elem );\n  }\n};\n\nproto.getElementWindowScrollY = function( elem ) {\n  var rect = elem.getBoundingClientRect();\n  return rect.top + window.pageYOffset;\n};\n\n// wow, stupid name\nproto.getElementElementScrollY = function( elem ) {\n  return elem.offsetTop - this.top;\n};\n\nproto.onScrollHistory = function() {\n  // cycle through positions, find biggest without going over\n  var scrollViewY = this.getScrollViewY();\n  var pageIndex, page;\n  for ( var i=0; i < this.scrollPages.length; i++ ) {\n    var scrollPage = this.scrollPages[i];\n    if ( scrollPage.top >= scrollViewY ) {\n      break;\n    }\n    pageIndex = i;\n    page = scrollPage;\n  }\n  // set history if changed\n  if ( pageIndex != this.scrollPageIndex ) {\n    this.scrollPageIndex = pageIndex;\n    this.setHistory( page.title, page.path );\n  }\n};\n\nutils.debounceMethod( InfiniteScroll, 'onScrollHistory', 150 );\n\nproto.getScrollViewY = function() {\n  if ( this.options.elementScroll ) {\n    return this.scroller.scrollTop + this.scroller.clientHeight/2;\n  } else {\n    return window.pageYOffset + this.windowHeight/2;\n  }\n};\n\nproto.setHistory = function( title, path ) {\n  var optHistory = this.options.history;\n  var historyMethod = optHistory && history[ optHistory + 'State' ];\n  if ( !historyMethod ) {\n    return;\n  }\n\n  history[ optHistory + 'State' ]( null, title, path );\n\n  if ( this.options.historyTitle ) {\n    document.title = title;\n  }\n\n  this.dispatchEvent( 'history', null, [ title, path ] );\n};\n\n// scroll to top to prevent initial scroll-reset after page refresh\n// https://stackoverflow.com/a/18633915/182183\nproto.onUnload = function() {\n  var pageIndex = this.scrollPageIndex;\n  if ( pageIndex === 0 ) {\n    return;\n  }\n  // calculate where scroll position would be on refresh\n  var scrollPage = this.scrollPages[ pageIndex ];\n  var scrollY = window.pageYOffset - scrollPage.top + this.top;\n  // disable scroll event before setting scroll #679\n  this.destroyHistory();\n  scrollTo( 0, scrollY );\n};\n\n// ----- load history ----- //\n\n// update URL\nproto.onPageLoadHistory = function( response, path ) {\n  this.setHistory( response.title, path );\n};\n\n// --------------------------  -------------------------- //\n\nreturn InfiniteScroll;\n\n}));\n"},"sourceMaps":null,"error":null,"hash":"aaff5ae625275fbb576459b676a82be2","cacheData":{"env":{}}}